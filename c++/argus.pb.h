// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: argus.proto

#ifndef PROTOBUF_INCLUDED_argus_2eproto
#define PROTOBUF_INCLUDED_argus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_argus_2eproto 

namespace protobuf_argus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_argus_2eproto
namespace argus {
class ArgusWatcherSubject;
class ArgusWatcherSubjectDefaultTypeInternal;
extern ArgusWatcherSubjectDefaultTypeInternal _ArgusWatcherSubject_default_instance_;
class ArgusWatcherSubject_TagsEntry_DoNotUse;
class ArgusWatcherSubject_TagsEntry_DoNotUseDefaultTypeInternal;
extern ArgusWatcherSubject_TagsEntry_DoNotUseDefaultTypeInternal _ArgusWatcherSubject_TagsEntry_DoNotUse_default_instance_;
class ArgusdConfig;
class ArgusdConfigDefaultTypeInternal;
extern ArgusdConfigDefaultTypeInternal _ArgusdConfig_default_instance_;
class ArgusdHandle;
class ArgusdHandleDefaultTypeInternal;
extern ArgusdHandleDefaultTypeInternal _ArgusdHandle_default_instance_;
class ArgusdMetricsHandle;
class ArgusdMetricsHandleDefaultTypeInternal;
extern ArgusdMetricsHandleDefaultTypeInternal _ArgusdMetricsHandle_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace argus
namespace google {
namespace protobuf {
template<> ::argus::ArgusWatcherSubject* Arena::CreateMaybeMessage<::argus::ArgusWatcherSubject>(Arena*);
template<> ::argus::ArgusWatcherSubject_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::argus::ArgusWatcherSubject_TagsEntry_DoNotUse>(Arena*);
template<> ::argus::ArgusdConfig* Arena::CreateMaybeMessage<::argus::ArgusdConfig>(Arena*);
template<> ::argus::ArgusdHandle* Arena::CreateMaybeMessage<::argus::ArgusdHandle>(Arena*);
template<> ::argus::ArgusdMetricsHandle* Arena::CreateMaybeMessage<::argus::ArgusdMetricsHandle>(Arena*);
template<> ::argus::Empty* Arena::CreateMaybeMessage<::argus::Empty>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace argus {

// ===================================================================

class ArgusdConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:argus.ArgusdConfig) */ {
 public:
  ArgusdConfig();
  virtual ~ArgusdConfig();

  ArgusdConfig(const ArgusdConfig& from);

  inline ArgusdConfig& operator=(const ArgusdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgusdConfig(ArgusdConfig&& from) noexcept
    : ArgusdConfig() {
    *this = ::std::move(from);
  }

  inline ArgusdConfig& operator=(ArgusdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgusdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgusdConfig* internal_default_instance() {
    return reinterpret_cast<const ArgusdConfig*>(
               &_ArgusdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ArgusdConfig* other);
  friend void swap(ArgusdConfig& a, ArgusdConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgusdConfig* New() const final {
    return CreateMaybeMessage<ArgusdConfig>(NULL);
  }

  ArgusdConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgusdConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgusdConfig& from);
  void MergeFrom(const ArgusdConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgusdConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pid = 4;
  int pid_size() const;
  void clear_pid();
  static const int kPidFieldNumber = 4;
  ::google::protobuf::int32 pid(int index) const;
  void set_pid(int index, ::google::protobuf::int32 value);
  void add_pid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pid();

  // repeated string cid = 5;
  int cid_size() const;
  void clear_cid();
  static const int kCidFieldNumber = 5;
  const ::std::string& cid(int index) const;
  ::std::string* mutable_cid(int index);
  void set_cid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cid(int index, ::std::string&& value);
  #endif
  void set_cid(int index, const char* value);
  void set_cid(int index, const char* value, size_t size);
  ::std::string* add_cid();
  void add_cid(const ::std::string& value);
  #if LANG_CXX11
  void add_cid(::std::string&& value);
  #endif
  void add_cid(const char* value);
  void add_cid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cid();

  // repeated .argus.ArgusWatcherSubject subject = 6;
  int subject_size() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 6;
  ::argus::ArgusWatcherSubject* mutable_subject(int index);
  ::google::protobuf::RepeatedPtrField< ::argus::ArgusWatcherSubject >*
      mutable_subject();
  const ::argus::ArgusWatcherSubject& subject(int index) const;
  ::argus::ArgusWatcherSubject* add_subject();
  const ::google::protobuf::RepeatedPtrField< ::argus::ArgusWatcherSubject >&
      subject() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string nodeName = 2;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // string podName = 3;
  void clear_podname();
  static const int kPodNameFieldNumber = 3;
  const ::std::string& podname() const;
  void set_podname(const ::std::string& value);
  #if LANG_CXX11
  void set_podname(::std::string&& value);
  #endif
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  ::std::string* mutable_podname();
  ::std::string* release_podname();
  void set_allocated_podname(::std::string* podname);

  // string logFormat = 7;
  void clear_logformat();
  static const int kLogFormatFieldNumber = 7;
  const ::std::string& logformat() const;
  void set_logformat(const ::std::string& value);
  #if LANG_CXX11
  void set_logformat(::std::string&& value);
  #endif
  void set_logformat(const char* value);
  void set_logformat(const char* value, size_t size);
  ::std::string* mutable_logformat();
  ::std::string* release_logformat();
  void set_allocated_logformat(::std::string* logformat);

  // @@protoc_insertion_point(class_scope:argus.ArgusdConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pid_;
  mutable int _pid_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cid_;
  ::google::protobuf::RepeatedPtrField< ::argus::ArgusWatcherSubject > subject_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::google::protobuf::internal::ArenaStringPtr podname_;
  ::google::protobuf::internal::ArenaStringPtr logformat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_argus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArgusWatcherSubject_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ArgusWatcherSubject_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ArgusWatcherSubject_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ArgusWatcherSubject_TagsEntry_DoNotUse();
  ArgusWatcherSubject_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ArgusWatcherSubject_TagsEntry_DoNotUse& other);
  static const ArgusWatcherSubject_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ArgusWatcherSubject_TagsEntry_DoNotUse*>(&_ArgusWatcherSubject_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ArgusWatcherSubject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:argus.ArgusWatcherSubject) */ {
 public:
  ArgusWatcherSubject();
  virtual ~ArgusWatcherSubject();

  ArgusWatcherSubject(const ArgusWatcherSubject& from);

  inline ArgusWatcherSubject& operator=(const ArgusWatcherSubject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgusWatcherSubject(ArgusWatcherSubject&& from) noexcept
    : ArgusWatcherSubject() {
    *this = ::std::move(from);
  }

  inline ArgusWatcherSubject& operator=(ArgusWatcherSubject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgusWatcherSubject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgusWatcherSubject* internal_default_instance() {
    return reinterpret_cast<const ArgusWatcherSubject*>(
               &_ArgusWatcherSubject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ArgusWatcherSubject* other);
  friend void swap(ArgusWatcherSubject& a, ArgusWatcherSubject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgusWatcherSubject* New() const final {
    return CreateMaybeMessage<ArgusWatcherSubject>(NULL);
  }

  ArgusWatcherSubject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgusWatcherSubject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgusWatcherSubject& from);
  void MergeFrom(const ArgusWatcherSubject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgusWatcherSubject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string path = 1;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path(int index) const;
  ::std::string* mutable_path(int index);
  void set_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_path(int index, ::std::string&& value);
  #endif
  void set_path(int index, const char* value);
  void set_path(int index, const char* value, size_t size);
  ::std::string* add_path();
  void add_path(const ::std::string& value);
  #if LANG_CXX11
  void add_path(::std::string&& value);
  #endif
  void add_path(const char* value);
  void add_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();

  // repeated string event = 2;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::std::string& event(int index) const;
  ::std::string* mutable_event(int index);
  void set_event(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_event(int index, ::std::string&& value);
  #endif
  void set_event(int index, const char* value);
  void set_event(int index, const char* value, size_t size);
  ::std::string* add_event();
  void add_event(const ::std::string& value);
  #if LANG_CXX11
  void add_event(::std::string&& value);
  #endif
  void add_event(const char* value);
  void add_event(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& event() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event();

  // repeated string ignore = 3;
  int ignore_size() const;
  void clear_ignore();
  static const int kIgnoreFieldNumber = 3;
  const ::std::string& ignore(int index) const;
  ::std::string* mutable_ignore(int index);
  void set_ignore(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ignore(int index, ::std::string&& value);
  #endif
  void set_ignore(int index, const char* value);
  void set_ignore(int index, const char* value, size_t size);
  ::std::string* add_ignore();
  void add_ignore(const ::std::string& value);
  #if LANG_CXX11
  void add_ignore(::std::string&& value);
  #endif
  void add_ignore(const char* value);
  void add_ignore(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ignore() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ignore();

  // map<string, string> tags = 8;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // bool onlyDir = 4;
  void clear_onlydir();
  static const int kOnlyDirFieldNumber = 4;
  bool onlydir() const;
  void set_onlydir(bool value);

  // bool recursive = 5;
  void clear_recursive();
  static const int kRecursiveFieldNumber = 5;
  bool recursive() const;
  void set_recursive(bool value);

  // bool followMove = 7;
  void clear_followmove();
  static const int kFollowMoveFieldNumber = 7;
  bool followmove() const;
  void set_followmove(bool value);

  // int32 maxDepth = 6;
  void clear_maxdepth();
  static const int kMaxDepthFieldNumber = 6;
  ::google::protobuf::int32 maxdepth() const;
  void set_maxdepth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:argus.ArgusWatcherSubject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> event_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ignore_;
  ::google::protobuf::internal::MapField<
      ArgusWatcherSubject_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  bool onlydir_;
  bool recursive_;
  bool followmove_;
  ::google::protobuf::int32 maxdepth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_argus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArgusdHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:argus.ArgusdHandle) */ {
 public:
  ArgusdHandle();
  virtual ~ArgusdHandle();

  ArgusdHandle(const ArgusdHandle& from);

  inline ArgusdHandle& operator=(const ArgusdHandle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgusdHandle(ArgusdHandle&& from) noexcept
    : ArgusdHandle() {
    *this = ::std::move(from);
  }

  inline ArgusdHandle& operator=(ArgusdHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgusdHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgusdHandle* internal_default_instance() {
    return reinterpret_cast<const ArgusdHandle*>(
               &_ArgusdHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ArgusdHandle* other);
  friend void swap(ArgusdHandle& a, ArgusdHandle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgusdHandle* New() const final {
    return CreateMaybeMessage<ArgusdHandle>(NULL);
  }

  ArgusdHandle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgusdHandle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgusdHandle& from);
  void MergeFrom(const ArgusdHandle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgusdHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pid = 3;
  int pid_size() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::int32 pid(int index) const;
  void set_pid(int index, ::google::protobuf::int32 value);
  void add_pid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pid();

  // string nodeName = 1;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // string podName = 2;
  void clear_podname();
  static const int kPodNameFieldNumber = 2;
  const ::std::string& podname() const;
  void set_podname(const ::std::string& value);
  #if LANG_CXX11
  void set_podname(::std::string&& value);
  #endif
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  ::std::string* mutable_podname();
  ::std::string* release_podname();
  void set_allocated_podname(::std::string* podname);

  // @@protoc_insertion_point(class_scope:argus.ArgusdHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pid_;
  mutable int _pid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::google::protobuf::internal::ArenaStringPtr podname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_argus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArgusdMetricsHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:argus.ArgusdMetricsHandle) */ {
 public:
  ArgusdMetricsHandle();
  virtual ~ArgusdMetricsHandle();

  ArgusdMetricsHandle(const ArgusdMetricsHandle& from);

  inline ArgusdMetricsHandle& operator=(const ArgusdMetricsHandle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgusdMetricsHandle(ArgusdMetricsHandle&& from) noexcept
    : ArgusdMetricsHandle() {
    *this = ::std::move(from);
  }

  inline ArgusdMetricsHandle& operator=(ArgusdMetricsHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgusdMetricsHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgusdMetricsHandle* internal_default_instance() {
    return reinterpret_cast<const ArgusdMetricsHandle*>(
               &_ArgusdMetricsHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ArgusdMetricsHandle* other);
  friend void swap(ArgusdMetricsHandle& a, ArgusdMetricsHandle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgusdMetricsHandle* New() const final {
    return CreateMaybeMessage<ArgusdMetricsHandle>(NULL);
  }

  ArgusdMetricsHandle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgusdMetricsHandle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgusdMetricsHandle& from);
  void MergeFrom(const ArgusdMetricsHandle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgusdMetricsHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string argusWatcher = 1;
  void clear_arguswatcher();
  static const int kArgusWatcherFieldNumber = 1;
  const ::std::string& arguswatcher() const;
  void set_arguswatcher(const ::std::string& value);
  #if LANG_CXX11
  void set_arguswatcher(::std::string&& value);
  #endif
  void set_arguswatcher(const char* value);
  void set_arguswatcher(const char* value, size_t size);
  ::std::string* mutable_arguswatcher();
  ::std::string* release_arguswatcher();
  void set_allocated_arguswatcher(::std::string* arguswatcher);

  // string event = 2;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // string nodeName = 3;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 3;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // @@protoc_insertion_point(class_scope:argus.ArgusdMetricsHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr arguswatcher_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_argus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:argus.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:argus.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_argus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArgusdConfig

// string name = 1;
inline void ArgusdConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdConfig::name() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.name)
  return name_.GetNoArena();
}
inline void ArgusdConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.name)
}
#if LANG_CXX11
inline void ArgusdConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdConfig.name)
}
#endif
inline void ArgusdConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdConfig.name)
}
inline void ArgusdConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdConfig.name)
}
inline ::std::string* ArgusdConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdConfig::release_name() {
  // @@protoc_insertion_point(field_release:argus.ArgusdConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdConfig.name)
}

// string nodeName = 2;
inline void ArgusdConfig::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdConfig::nodename() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.nodeName)
  return nodename_.GetNoArena();
}
inline void ArgusdConfig::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.nodeName)
}
#if LANG_CXX11
inline void ArgusdConfig::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdConfig.nodeName)
}
#endif
inline void ArgusdConfig::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdConfig.nodeName)
}
inline void ArgusdConfig::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdConfig.nodeName)
}
inline ::std::string* ArgusdConfig::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdConfig.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdConfig::release_nodename() {
  // @@protoc_insertion_point(field_release:argus.ArgusdConfig.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdConfig::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdConfig.nodeName)
}

// string podName = 3;
inline void ArgusdConfig::clear_podname() {
  podname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdConfig::podname() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.podName)
  return podname_.GetNoArena();
}
inline void ArgusdConfig::set_podname(const ::std::string& value) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.podName)
}
#if LANG_CXX11
inline void ArgusdConfig::set_podname(::std::string&& value) {
  
  podname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdConfig.podName)
}
#endif
inline void ArgusdConfig::set_podname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdConfig.podName)
}
inline void ArgusdConfig::set_podname(const char* value, size_t size) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdConfig.podName)
}
inline ::std::string* ArgusdConfig::mutable_podname() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdConfig.podName)
  return podname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdConfig::release_podname() {
  // @@protoc_insertion_point(field_release:argus.ArgusdConfig.podName)
  
  return podname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdConfig::set_allocated_podname(::std::string* podname) {
  if (podname != NULL) {
    
  } else {
    
  }
  podname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), podname);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdConfig.podName)
}

// repeated int32 pid = 4;
inline int ArgusdConfig::pid_size() const {
  return pid_.size();
}
inline void ArgusdConfig::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::int32 ArgusdConfig::pid(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.pid)
  return pid_.Get(index);
}
inline void ArgusdConfig::set_pid(int index, ::google::protobuf::int32 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.pid)
}
inline void ArgusdConfig::add_pid(::google::protobuf::int32 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:argus.ArgusdConfig.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArgusdConfig::pid() const {
  // @@protoc_insertion_point(field_list:argus.ArgusdConfig.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArgusdConfig::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusdConfig.pid)
  return &pid_;
}

// repeated string cid = 5;
inline int ArgusdConfig::cid_size() const {
  return cid_.size();
}
inline void ArgusdConfig::clear_cid() {
  cid_.Clear();
}
inline const ::std::string& ArgusdConfig::cid(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.cid)
  return cid_.Get(index);
}
inline ::std::string* ArgusdConfig::mutable_cid(int index) {
  // @@protoc_insertion_point(field_mutable:argus.ArgusdConfig.cid)
  return cid_.Mutable(index);
}
inline void ArgusdConfig::set_cid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.cid)
  cid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArgusdConfig::set_cid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.cid)
  cid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArgusdConfig::set_cid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:argus.ArgusdConfig.cid)
}
inline void ArgusdConfig::set_cid(int index, const char* value, size_t size) {
  cid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdConfig.cid)
}
inline ::std::string* ArgusdConfig::add_cid() {
  // @@protoc_insertion_point(field_add_mutable:argus.ArgusdConfig.cid)
  return cid_.Add();
}
inline void ArgusdConfig::add_cid(const ::std::string& value) {
  cid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:argus.ArgusdConfig.cid)
}
#if LANG_CXX11
inline void ArgusdConfig::add_cid(::std::string&& value) {
  cid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:argus.ArgusdConfig.cid)
}
#endif
inline void ArgusdConfig::add_cid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:argus.ArgusdConfig.cid)
}
inline void ArgusdConfig::add_cid(const char* value, size_t size) {
  cid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:argus.ArgusdConfig.cid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArgusdConfig::cid() const {
  // @@protoc_insertion_point(field_list:argus.ArgusdConfig.cid)
  return cid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArgusdConfig::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusdConfig.cid)
  return &cid_;
}

// repeated .argus.ArgusWatcherSubject subject = 6;
inline int ArgusdConfig::subject_size() const {
  return subject_.size();
}
inline void ArgusdConfig::clear_subject() {
  subject_.Clear();
}
inline ::argus::ArgusWatcherSubject* ArgusdConfig::mutable_subject(int index) {
  // @@protoc_insertion_point(field_mutable:argus.ArgusdConfig.subject)
  return subject_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::argus::ArgusWatcherSubject >*
ArgusdConfig::mutable_subject() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusdConfig.subject)
  return &subject_;
}
inline const ::argus::ArgusWatcherSubject& ArgusdConfig::subject(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.subject)
  return subject_.Get(index);
}
inline ::argus::ArgusWatcherSubject* ArgusdConfig::add_subject() {
  // @@protoc_insertion_point(field_add:argus.ArgusdConfig.subject)
  return subject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argus::ArgusWatcherSubject >&
ArgusdConfig::subject() const {
  // @@protoc_insertion_point(field_list:argus.ArgusdConfig.subject)
  return subject_;
}

// string logFormat = 7;
inline void ArgusdConfig::clear_logformat() {
  logformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdConfig::logformat() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdConfig.logFormat)
  return logformat_.GetNoArena();
}
inline void ArgusdConfig::set_logformat(const ::std::string& value) {
  
  logformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdConfig.logFormat)
}
#if LANG_CXX11
inline void ArgusdConfig::set_logformat(::std::string&& value) {
  
  logformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdConfig.logFormat)
}
#endif
inline void ArgusdConfig::set_logformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdConfig.logFormat)
}
inline void ArgusdConfig::set_logformat(const char* value, size_t size) {
  
  logformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdConfig.logFormat)
}
inline ::std::string* ArgusdConfig::mutable_logformat() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdConfig.logFormat)
  return logformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdConfig::release_logformat() {
  // @@protoc_insertion_point(field_release:argus.ArgusdConfig.logFormat)
  
  return logformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdConfig::set_allocated_logformat(::std::string* logformat) {
  if (logformat != NULL) {
    
  } else {
    
  }
  logformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logformat);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdConfig.logFormat)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ArgusWatcherSubject

// repeated string path = 1;
inline int ArgusWatcherSubject::path_size() const {
  return path_.size();
}
inline void ArgusWatcherSubject::clear_path() {
  path_.Clear();
}
inline const ::std::string& ArgusWatcherSubject::path(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.path)
  return path_.Get(index);
}
inline ::std::string* ArgusWatcherSubject::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:argus.ArgusWatcherSubject.path)
  return path_.Mutable(index);
}
inline void ArgusWatcherSubject::set_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.path)
  path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArgusWatcherSubject::set_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.path)
  path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArgusWatcherSubject::set_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:argus.ArgusWatcherSubject.path)
}
inline void ArgusWatcherSubject::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusWatcherSubject.path)
}
inline ::std::string* ArgusWatcherSubject::add_path() {
  // @@protoc_insertion_point(field_add_mutable:argus.ArgusWatcherSubject.path)
  return path_.Add();
}
inline void ArgusWatcherSubject::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:argus.ArgusWatcherSubject.path)
}
#if LANG_CXX11
inline void ArgusWatcherSubject::add_path(::std::string&& value) {
  path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:argus.ArgusWatcherSubject.path)
}
#endif
inline void ArgusWatcherSubject::add_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:argus.ArgusWatcherSubject.path)
}
inline void ArgusWatcherSubject::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:argus.ArgusWatcherSubject.path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArgusWatcherSubject::path() const {
  // @@protoc_insertion_point(field_list:argus.ArgusWatcherSubject.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArgusWatcherSubject::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusWatcherSubject.path)
  return &path_;
}

// repeated string event = 2;
inline int ArgusWatcherSubject::event_size() const {
  return event_.size();
}
inline void ArgusWatcherSubject::clear_event() {
  event_.Clear();
}
inline const ::std::string& ArgusWatcherSubject::event(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.event)
  return event_.Get(index);
}
inline ::std::string* ArgusWatcherSubject::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:argus.ArgusWatcherSubject.event)
  return event_.Mutable(index);
}
inline void ArgusWatcherSubject::set_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.event)
  event_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArgusWatcherSubject::set_event(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.event)
  event_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArgusWatcherSubject::set_event(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:argus.ArgusWatcherSubject.event)
}
inline void ArgusWatcherSubject::set_event(int index, const char* value, size_t size) {
  event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusWatcherSubject.event)
}
inline ::std::string* ArgusWatcherSubject::add_event() {
  // @@protoc_insertion_point(field_add_mutable:argus.ArgusWatcherSubject.event)
  return event_.Add();
}
inline void ArgusWatcherSubject::add_event(const ::std::string& value) {
  event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:argus.ArgusWatcherSubject.event)
}
#if LANG_CXX11
inline void ArgusWatcherSubject::add_event(::std::string&& value) {
  event_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:argus.ArgusWatcherSubject.event)
}
#endif
inline void ArgusWatcherSubject::add_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:argus.ArgusWatcherSubject.event)
}
inline void ArgusWatcherSubject::add_event(const char* value, size_t size) {
  event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:argus.ArgusWatcherSubject.event)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArgusWatcherSubject::event() const {
  // @@protoc_insertion_point(field_list:argus.ArgusWatcherSubject.event)
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArgusWatcherSubject::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusWatcherSubject.event)
  return &event_;
}

// repeated string ignore = 3;
inline int ArgusWatcherSubject::ignore_size() const {
  return ignore_.size();
}
inline void ArgusWatcherSubject::clear_ignore() {
  ignore_.Clear();
}
inline const ::std::string& ArgusWatcherSubject::ignore(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.ignore)
  return ignore_.Get(index);
}
inline ::std::string* ArgusWatcherSubject::mutable_ignore(int index) {
  // @@protoc_insertion_point(field_mutable:argus.ArgusWatcherSubject.ignore)
  return ignore_.Mutable(index);
}
inline void ArgusWatcherSubject::set_ignore(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.ignore)
  ignore_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArgusWatcherSubject::set_ignore(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.ignore)
  ignore_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArgusWatcherSubject::set_ignore(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ignore_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:argus.ArgusWatcherSubject.ignore)
}
inline void ArgusWatcherSubject::set_ignore(int index, const char* value, size_t size) {
  ignore_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusWatcherSubject.ignore)
}
inline ::std::string* ArgusWatcherSubject::add_ignore() {
  // @@protoc_insertion_point(field_add_mutable:argus.ArgusWatcherSubject.ignore)
  return ignore_.Add();
}
inline void ArgusWatcherSubject::add_ignore(const ::std::string& value) {
  ignore_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:argus.ArgusWatcherSubject.ignore)
}
#if LANG_CXX11
inline void ArgusWatcherSubject::add_ignore(::std::string&& value) {
  ignore_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:argus.ArgusWatcherSubject.ignore)
}
#endif
inline void ArgusWatcherSubject::add_ignore(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ignore_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:argus.ArgusWatcherSubject.ignore)
}
inline void ArgusWatcherSubject::add_ignore(const char* value, size_t size) {
  ignore_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:argus.ArgusWatcherSubject.ignore)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArgusWatcherSubject::ignore() const {
  // @@protoc_insertion_point(field_list:argus.ArgusWatcherSubject.ignore)
  return ignore_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArgusWatcherSubject::mutable_ignore() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusWatcherSubject.ignore)
  return &ignore_;
}

// bool onlyDir = 4;
inline void ArgusWatcherSubject::clear_onlydir() {
  onlydir_ = false;
}
inline bool ArgusWatcherSubject::onlydir() const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.onlyDir)
  return onlydir_;
}
inline void ArgusWatcherSubject::set_onlydir(bool value) {
  
  onlydir_ = value;
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.onlyDir)
}

// bool recursive = 5;
inline void ArgusWatcherSubject::clear_recursive() {
  recursive_ = false;
}
inline bool ArgusWatcherSubject::recursive() const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.recursive)
  return recursive_;
}
inline void ArgusWatcherSubject::set_recursive(bool value) {
  
  recursive_ = value;
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.recursive)
}

// int32 maxDepth = 6;
inline void ArgusWatcherSubject::clear_maxdepth() {
  maxdepth_ = 0;
}
inline ::google::protobuf::int32 ArgusWatcherSubject::maxdepth() const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.maxDepth)
  return maxdepth_;
}
inline void ArgusWatcherSubject::set_maxdepth(::google::protobuf::int32 value) {
  
  maxdepth_ = value;
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.maxDepth)
}

// bool followMove = 7;
inline void ArgusWatcherSubject::clear_followmove() {
  followmove_ = false;
}
inline bool ArgusWatcherSubject::followmove() const {
  // @@protoc_insertion_point(field_get:argus.ArgusWatcherSubject.followMove)
  return followmove_;
}
inline void ArgusWatcherSubject::set_followmove(bool value) {
  
  followmove_ = value;
  // @@protoc_insertion_point(field_set:argus.ArgusWatcherSubject.followMove)
}

// map<string, string> tags = 8;
inline int ArgusWatcherSubject::tags_size() const {
  return tags_.size();
}
inline void ArgusWatcherSubject::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ArgusWatcherSubject::tags() const {
  // @@protoc_insertion_point(field_map:argus.ArgusWatcherSubject.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ArgusWatcherSubject::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:argus.ArgusWatcherSubject.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// ArgusdHandle

// string nodeName = 1;
inline void ArgusdHandle::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdHandle::nodename() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdHandle.nodeName)
  return nodename_.GetNoArena();
}
inline void ArgusdHandle::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdHandle.nodeName)
}
#if LANG_CXX11
inline void ArgusdHandle::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdHandle.nodeName)
}
#endif
inline void ArgusdHandle::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdHandle.nodeName)
}
inline void ArgusdHandle::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdHandle.nodeName)
}
inline ::std::string* ArgusdHandle::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdHandle.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdHandle::release_nodename() {
  // @@protoc_insertion_point(field_release:argus.ArgusdHandle.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdHandle::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdHandle.nodeName)
}

// string podName = 2;
inline void ArgusdHandle::clear_podname() {
  podname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdHandle::podname() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdHandle.podName)
  return podname_.GetNoArena();
}
inline void ArgusdHandle::set_podname(const ::std::string& value) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdHandle.podName)
}
#if LANG_CXX11
inline void ArgusdHandle::set_podname(::std::string&& value) {
  
  podname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdHandle.podName)
}
#endif
inline void ArgusdHandle::set_podname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdHandle.podName)
}
inline void ArgusdHandle::set_podname(const char* value, size_t size) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdHandle.podName)
}
inline ::std::string* ArgusdHandle::mutable_podname() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdHandle.podName)
  return podname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdHandle::release_podname() {
  // @@protoc_insertion_point(field_release:argus.ArgusdHandle.podName)
  
  return podname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdHandle::set_allocated_podname(::std::string* podname) {
  if (podname != NULL) {
    
  } else {
    
  }
  podname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), podname);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdHandle.podName)
}

// repeated int32 pid = 3;
inline int ArgusdHandle::pid_size() const {
  return pid_.size();
}
inline void ArgusdHandle::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::int32 ArgusdHandle::pid(int index) const {
  // @@protoc_insertion_point(field_get:argus.ArgusdHandle.pid)
  return pid_.Get(index);
}
inline void ArgusdHandle::set_pid(int index, ::google::protobuf::int32 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:argus.ArgusdHandle.pid)
}
inline void ArgusdHandle::add_pid(::google::protobuf::int32 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:argus.ArgusdHandle.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArgusdHandle::pid() const {
  // @@protoc_insertion_point(field_list:argus.ArgusdHandle.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArgusdHandle::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:argus.ArgusdHandle.pid)
  return &pid_;
}

// -------------------------------------------------------------------

// ArgusdMetricsHandle

// string argusWatcher = 1;
inline void ArgusdMetricsHandle::clear_arguswatcher() {
  arguswatcher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdMetricsHandle::arguswatcher() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdMetricsHandle.argusWatcher)
  return arguswatcher_.GetNoArena();
}
inline void ArgusdMetricsHandle::set_arguswatcher(const ::std::string& value) {
  
  arguswatcher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdMetricsHandle.argusWatcher)
}
#if LANG_CXX11
inline void ArgusdMetricsHandle::set_arguswatcher(::std::string&& value) {
  
  arguswatcher_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdMetricsHandle.argusWatcher)
}
#endif
inline void ArgusdMetricsHandle::set_arguswatcher(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arguswatcher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdMetricsHandle.argusWatcher)
}
inline void ArgusdMetricsHandle::set_arguswatcher(const char* value, size_t size) {
  
  arguswatcher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdMetricsHandle.argusWatcher)
}
inline ::std::string* ArgusdMetricsHandle::mutable_arguswatcher() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdMetricsHandle.argusWatcher)
  return arguswatcher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdMetricsHandle::release_arguswatcher() {
  // @@protoc_insertion_point(field_release:argus.ArgusdMetricsHandle.argusWatcher)
  
  return arguswatcher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdMetricsHandle::set_allocated_arguswatcher(::std::string* arguswatcher) {
  if (arguswatcher != NULL) {
    
  } else {
    
  }
  arguswatcher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arguswatcher);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdMetricsHandle.argusWatcher)
}

// string event = 2;
inline void ArgusdMetricsHandle::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdMetricsHandle::event() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdMetricsHandle.event)
  return event_.GetNoArena();
}
inline void ArgusdMetricsHandle::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdMetricsHandle.event)
}
#if LANG_CXX11
inline void ArgusdMetricsHandle::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdMetricsHandle.event)
}
#endif
inline void ArgusdMetricsHandle::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdMetricsHandle.event)
}
inline void ArgusdMetricsHandle::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdMetricsHandle.event)
}
inline ::std::string* ArgusdMetricsHandle::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdMetricsHandle.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdMetricsHandle::release_event() {
  // @@protoc_insertion_point(field_release:argus.ArgusdMetricsHandle.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdMetricsHandle::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdMetricsHandle.event)
}

// string nodeName = 3;
inline void ArgusdMetricsHandle::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgusdMetricsHandle::nodename() const {
  // @@protoc_insertion_point(field_get:argus.ArgusdMetricsHandle.nodeName)
  return nodename_.GetNoArena();
}
inline void ArgusdMetricsHandle::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:argus.ArgusdMetricsHandle.nodeName)
}
#if LANG_CXX11
inline void ArgusdMetricsHandle::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:argus.ArgusdMetricsHandle.nodeName)
}
#endif
inline void ArgusdMetricsHandle::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:argus.ArgusdMetricsHandle.nodeName)
}
inline void ArgusdMetricsHandle::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:argus.ArgusdMetricsHandle.nodeName)
}
inline ::std::string* ArgusdMetricsHandle::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:argus.ArgusdMetricsHandle.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgusdMetricsHandle::release_nodename() {
  // @@protoc_insertion_point(field_release:argus.ArgusdMetricsHandle.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgusdMetricsHandle::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:argus.ArgusdMetricsHandle.nodeName)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace argus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_argus_2eproto
