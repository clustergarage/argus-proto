// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: argus.proto

#include "argus.pb.h"
#include "argus.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace argus {

static const char* Argusd_method_names[] = {
  "/argus.Argusd/CreateWatch",
  "/argus.Argusd/DestroyWatch",
  "/argus.Argusd/GetWatchState",
  "/argus.Argusd/RecordMetrics",
};

std::unique_ptr< Argusd::Stub> Argusd::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Argusd::Stub> stub(new Argusd::Stub(channel));
  return stub;
}

Argusd::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateWatch_(Argusd_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyWatch_(Argusd_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWatchState_(Argusd_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordMetrics_(Argusd_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Argusd::Stub::CreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::argus::ArgusdHandle* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateWatch_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>* Argusd::Stub::AsyncCreateWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::argus::ArgusdHandle>::Create(channel_.get(), cq, rpcmethod_CreateWatch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>* Argusd::Stub::PrepareAsyncCreateWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::argus::ArgusdHandle>::Create(channel_.get(), cq, rpcmethod_CreateWatch_, context, request, false);
}

::grpc::Status Argusd::Stub::DestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::argus::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DestroyWatch_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::argus::Empty>* Argusd::Stub::AsyncDestroyWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::argus::Empty>::Create(channel_.get(), cq, rpcmethod_DestroyWatch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::argus::Empty>* Argusd::Stub::PrepareAsyncDestroyWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::argus::Empty>::Create(channel_.get(), cq, rpcmethod_DestroyWatch_, context, request, false);
}

::grpc::ClientReader< ::argus::ArgusdHandle>* Argusd::Stub::GetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::argus::ArgusdHandle>::Create(channel_.get(), rpcmethod_GetWatchState_, context, request);
}

::grpc::ClientAsyncReader< ::argus::ArgusdHandle>* Argusd::Stub::AsyncGetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::argus::ArgusdHandle>::Create(channel_.get(), cq, rpcmethod_GetWatchState_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::argus::ArgusdHandle>* Argusd::Stub::PrepareAsyncGetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::argus::ArgusdHandle>::Create(channel_.get(), cq, rpcmethod_GetWatchState_, context, request, false, nullptr);
}

::grpc::ClientReader< ::argus::ArgusdMetricsHandle>* Argusd::Stub::RecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::argus::ArgusdMetricsHandle>::Create(channel_.get(), rpcmethod_RecordMetrics_, context, request);
}

::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>* Argusd::Stub::AsyncRecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::argus::ArgusdMetricsHandle>::Create(channel_.get(), cq, rpcmethod_RecordMetrics_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>* Argusd::Stub::PrepareAsyncRecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::argus::ArgusdMetricsHandle>::Create(channel_.get(), cq, rpcmethod_RecordMetrics_, context, request, false, nullptr);
}

Argusd::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Argusd_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Argusd::Service, ::argus::ArgusdConfig, ::argus::ArgusdHandle>(
          std::mem_fn(&Argusd::Service::CreateWatch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Argusd_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Argusd::Service, ::argus::ArgusdConfig, ::argus::Empty>(
          std::mem_fn(&Argusd::Service::DestroyWatch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Argusd_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Argusd::Service, ::argus::Empty, ::argus::ArgusdHandle>(
          std::mem_fn(&Argusd::Service::GetWatchState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Argusd_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Argusd::Service, ::argus::Empty, ::argus::ArgusdMetricsHandle>(
          std::mem_fn(&Argusd::Service::RecordMetrics), this)));
}

Argusd::Service::~Service() {
}

::grpc::Status Argusd::Service::CreateWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::ArgusdHandle* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Argusd::Service::DestroyWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Argusd::Service::GetWatchState(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdHandle>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Argusd::Service::RecordMetrics(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdMetricsHandle>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace argus

