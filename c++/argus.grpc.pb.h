// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: argus.proto
#ifndef GRPC_argus_2eproto__INCLUDED
#define GRPC_argus_2eproto__INCLUDED

#include "argus.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace argus {

class Argusd final {
 public:
  static constexpr char const* service_full_name() {
    return "argus.Argusd";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::argus::ArgusdHandle* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::ArgusdHandle>> AsyncCreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::ArgusdHandle>>(AsyncCreateWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::ArgusdHandle>> PrepareAsyncCreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::ArgusdHandle>>(PrepareAsyncCreateWatchRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::argus::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::Empty>> AsyncDestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::Empty>>(AsyncDestroyWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::Empty>> PrepareAsyncDestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::argus::Empty>>(PrepareAsyncDestroyWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::argus::ArgusdHandle>> GetWatchState(::grpc::ClientContext* context, const ::argus::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::argus::ArgusdHandle>>(GetWatchStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdHandle>> AsyncGetWatchState(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdHandle>>(AsyncGetWatchStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdHandle>> PrepareAsyncGetWatchState(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdHandle>>(PrepareAsyncGetWatchStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::argus::ArgusdMetricsHandle>> RecordMetrics(::grpc::ClientContext* context, const ::argus::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::argus::ArgusdMetricsHandle>>(RecordMetricsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdMetricsHandle>> AsyncRecordMetrics(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdMetricsHandle>>(AsyncRecordMetricsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdMetricsHandle>> PrepareAsyncRecordMetrics(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdMetricsHandle>>(PrepareAsyncRecordMetricsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::argus::ArgusdHandle>* AsyncCreateWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::argus::ArgusdHandle>* PrepareAsyncCreateWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::argus::Empty>* AsyncDestroyWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::argus::Empty>* PrepareAsyncDestroyWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::argus::ArgusdHandle>* GetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdHandle>* AsyncGetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdHandle>* PrepareAsyncGetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::argus::ArgusdMetricsHandle>* RecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdMetricsHandle>* AsyncRecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::argus::ArgusdMetricsHandle>* PrepareAsyncRecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::argus::ArgusdHandle* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>> AsyncCreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>>(AsyncCreateWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>> PrepareAsyncCreateWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>>(PrepareAsyncCreateWatchRaw(context, request, cq));
    }
    ::grpc::Status DestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::argus::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::Empty>> AsyncDestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::Empty>>(AsyncDestroyWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::Empty>> PrepareAsyncDestroyWatch(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::argus::Empty>>(PrepareAsyncDestroyWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::argus::ArgusdHandle>> GetWatchState(::grpc::ClientContext* context, const ::argus::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::argus::ArgusdHandle>>(GetWatchStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdHandle>> AsyncGetWatchState(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdHandle>>(AsyncGetWatchStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdHandle>> PrepareAsyncGetWatchState(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdHandle>>(PrepareAsyncGetWatchStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::argus::ArgusdMetricsHandle>> RecordMetrics(::grpc::ClientContext* context, const ::argus::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::argus::ArgusdMetricsHandle>>(RecordMetricsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>> AsyncRecordMetrics(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>>(AsyncRecordMetricsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>> PrepareAsyncRecordMetrics(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>>(PrepareAsyncRecordMetricsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>* AsyncCreateWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::argus::ArgusdHandle>* PrepareAsyncCreateWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::argus::Empty>* AsyncDestroyWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::argus::Empty>* PrepareAsyncDestroyWatchRaw(::grpc::ClientContext* context, const ::argus::ArgusdConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::argus::ArgusdHandle>* GetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request) override;
    ::grpc::ClientAsyncReader< ::argus::ArgusdHandle>* AsyncGetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::argus::ArgusdHandle>* PrepareAsyncGetWatchStateRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::argus::ArgusdMetricsHandle>* RecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request) override;
    ::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>* AsyncRecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::argus::ArgusdMetricsHandle>* PrepareAsyncRecordMetricsRaw(::grpc::ClientContext* context, const ::argus::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWatch_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyWatch_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWatchState_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordMetrics_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::ArgusdHandle* response);
    virtual ::grpc::Status DestroyWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::Empty* response);
    virtual ::grpc::Status GetWatchState(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdHandle>* writer);
    virtual ::grpc::Status RecordMetrics(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdMetricsHandle>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateWatch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::ArgusdHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWatch(::grpc::ServerContext* context, ::argus::ArgusdConfig* request, ::grpc::ServerAsyncResponseWriter< ::argus::ArgusdHandle>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DestroyWatch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DestroyWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyWatch(::grpc::ServerContext* context, ::argus::ArgusdConfig* request, ::grpc::ServerAsyncResponseWriter< ::argus::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWatchState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWatchState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetWatchState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWatchState(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdHandle>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWatchState(::grpc::ServerContext* context, ::argus::Empty* request, ::grpc::ServerAsyncWriter< ::argus::ArgusdHandle>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RecordMetrics() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordMetrics(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdMetricsHandle>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordMetrics(::grpc::ServerContext* context, ::argus::Empty* request, ::grpc::ServerAsyncWriter< ::argus::ArgusdMetricsHandle>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateWatch<WithAsyncMethod_DestroyWatch<WithAsyncMethod_GetWatchState<WithAsyncMethod_RecordMetrics<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateWatch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::ArgusdHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DestroyWatch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DestroyWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWatchState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWatchState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetWatchState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWatchState(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdHandle>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RecordMetrics() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordMetrics(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdMetricsHandle>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateWatch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::argus::ArgusdConfig, ::argus::ArgusdHandle>(std::bind(&WithStreamedUnaryMethod_CreateWatch<BaseClass>::StreamedCreateWatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::ArgusdHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::argus::ArgusdConfig,::argus::ArgusdHandle>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DestroyWatch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::argus::ArgusdConfig, ::argus::Empty>(std::bind(&WithStreamedUnaryMethod_DestroyWatch<BaseClass>::StreamedDestroyWatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DestroyWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyWatch(::grpc::ServerContext* context, const ::argus::ArgusdConfig* request, ::argus::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyWatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::argus::ArgusdConfig,::argus::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateWatch<WithStreamedUnaryMethod_DestroyWatch<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetWatchState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetWatchState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::argus::Empty, ::argus::ArgusdHandle>(std::bind(&WithSplitStreamingMethod_GetWatchState<BaseClass>::StreamedGetWatchState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetWatchState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWatchState(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdHandle>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetWatchState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::argus::Empty,::argus::ArgusdHandle>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_RecordMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_RecordMetrics() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::argus::Empty, ::argus::ArgusdMetricsHandle>(std::bind(&WithSplitStreamingMethod_RecordMetrics<BaseClass>::StreamedRecordMetrics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_RecordMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordMetrics(::grpc::ServerContext* context, const ::argus::Empty* request, ::grpc::ServerWriter< ::argus::ArgusdMetricsHandle>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRecordMetrics(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::argus::Empty,::argus::ArgusdMetricsHandle>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetWatchState<WithSplitStreamingMethod_RecordMetrics<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateWatch<WithStreamedUnaryMethod_DestroyWatch<WithSplitStreamingMethod_GetWatchState<WithSplitStreamingMethod_RecordMetrics<Service > > > > StreamedService;
};

}  // namespace argus


#endif  // GRPC_argus_2eproto__INCLUDED
