// Code generated by protoc-gen-go. DO NOT EDIT.
// source: argus.proto

package argus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArgusdConfig struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeName             string                 `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	PodName              string                 `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	Pid                  []int32                `protobuf:"varint,4,rep,packed,name=pid,proto3" json:"pid,omitempty"`
	Cid                  []string               `protobuf:"bytes,5,rep,name=cid,proto3" json:"cid,omitempty"`
	Subject              []*ArgusWatcherSubject `protobuf:"bytes,6,rep,name=subject,proto3" json:"subject,omitempty"`
	LogFormat            string                 `protobuf:"bytes,7,opt,name=logFormat,proto3" json:"logFormat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ArgusdConfig) Reset()         { *m = ArgusdConfig{} }
func (m *ArgusdConfig) String() string { return proto.CompactTextString(m) }
func (*ArgusdConfig) ProtoMessage()    {}
func (*ArgusdConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_argus_88dc73f8baf515d2, []int{0}
}
func (m *ArgusdConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArgusdConfig.Unmarshal(m, b)
}
func (m *ArgusdConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArgusdConfig.Marshal(b, m, deterministic)
}
func (dst *ArgusdConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgusdConfig.Merge(dst, src)
}
func (m *ArgusdConfig) XXX_Size() int {
	return xxx_messageInfo_ArgusdConfig.Size(m)
}
func (m *ArgusdConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgusdConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ArgusdConfig proto.InternalMessageInfo

func (m *ArgusdConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArgusdConfig) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ArgusdConfig) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ArgusdConfig) GetPid() []int32 {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *ArgusdConfig) GetCid() []string {
	if m != nil {
		return m.Cid
	}
	return nil
}

func (m *ArgusdConfig) GetSubject() []*ArgusWatcherSubject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *ArgusdConfig) GetLogFormat() string {
	if m != nil {
		return m.LogFormat
	}
	return ""
}

type ArgusWatcherSubject struct {
	Path                 []string          `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	Event                []string          `protobuf:"bytes,2,rep,name=event,proto3" json:"event,omitempty"`
	Ignore               []string          `protobuf:"bytes,3,rep,name=ignore,proto3" json:"ignore,omitempty"`
	OnlyDir              bool              `protobuf:"varint,4,opt,name=onlyDir,proto3" json:"onlyDir,omitempty"`
	Recursive            bool              `protobuf:"varint,5,opt,name=recursive,proto3" json:"recursive,omitempty"`
	MaxDepth             int32             `protobuf:"varint,6,opt,name=maxDepth,proto3" json:"maxDepth,omitempty"`
	FollowMove           bool              `protobuf:"varint,7,opt,name=followMove,proto3" json:"followMove,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ArgusWatcherSubject) Reset()         { *m = ArgusWatcherSubject{} }
func (m *ArgusWatcherSubject) String() string { return proto.CompactTextString(m) }
func (*ArgusWatcherSubject) ProtoMessage()    {}
func (*ArgusWatcherSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_argus_88dc73f8baf515d2, []int{1}
}
func (m *ArgusWatcherSubject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArgusWatcherSubject.Unmarshal(m, b)
}
func (m *ArgusWatcherSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArgusWatcherSubject.Marshal(b, m, deterministic)
}
func (dst *ArgusWatcherSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgusWatcherSubject.Merge(dst, src)
}
func (m *ArgusWatcherSubject) XXX_Size() int {
	return xxx_messageInfo_ArgusWatcherSubject.Size(m)
}
func (m *ArgusWatcherSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgusWatcherSubject.DiscardUnknown(m)
}

var xxx_messageInfo_ArgusWatcherSubject proto.InternalMessageInfo

func (m *ArgusWatcherSubject) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ArgusWatcherSubject) GetEvent() []string {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ArgusWatcherSubject) GetIgnore() []string {
	if m != nil {
		return m.Ignore
	}
	return nil
}

func (m *ArgusWatcherSubject) GetOnlyDir() bool {
	if m != nil {
		return m.OnlyDir
	}
	return false
}

func (m *ArgusWatcherSubject) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *ArgusWatcherSubject) GetMaxDepth() int32 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

func (m *ArgusWatcherSubject) GetFollowMove() bool {
	if m != nil {
		return m.FollowMove
	}
	return false
}

func (m *ArgusWatcherSubject) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ArgusdHandle struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	PodName              string   `protobuf:"bytes,2,opt,name=podName,proto3" json:"podName,omitempty"`
	Pid                  []int32  `protobuf:"varint,3,rep,packed,name=pid,proto3" json:"pid,omitempty"`
	ProcessEventfd       []int32  `protobuf:"varint,4,rep,packed,name=processEventfd,proto3" json:"processEventfd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgusdHandle) Reset()         { *m = ArgusdHandle{} }
func (m *ArgusdHandle) String() string { return proto.CompactTextString(m) }
func (*ArgusdHandle) ProtoMessage()    {}
func (*ArgusdHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_argus_88dc73f8baf515d2, []int{2}
}
func (m *ArgusdHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArgusdHandle.Unmarshal(m, b)
}
func (m *ArgusdHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArgusdHandle.Marshal(b, m, deterministic)
}
func (dst *ArgusdHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgusdHandle.Merge(dst, src)
}
func (m *ArgusdHandle) XXX_Size() int {
	return xxx_messageInfo_ArgusdHandle.Size(m)
}
func (m *ArgusdHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgusdHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ArgusdHandle proto.InternalMessageInfo

func (m *ArgusdHandle) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ArgusdHandle) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ArgusdHandle) GetPid() []int32 {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *ArgusdHandle) GetProcessEventfd() []int32 {
	if m != nil {
		return m.ProcessEventfd
	}
	return nil
}

type ArgusdMetricsHandle struct {
	ArgusWatcher         string   `protobuf:"bytes,1,opt,name=argusWatcher,proto3" json:"argusWatcher,omitempty"`
	Event                string   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	NodeName             string   `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgusdMetricsHandle) Reset()         { *m = ArgusdMetricsHandle{} }
func (m *ArgusdMetricsHandle) String() string { return proto.CompactTextString(m) }
func (*ArgusdMetricsHandle) ProtoMessage()    {}
func (*ArgusdMetricsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_argus_88dc73f8baf515d2, []int{3}
}
func (m *ArgusdMetricsHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArgusdMetricsHandle.Unmarshal(m, b)
}
func (m *ArgusdMetricsHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArgusdMetricsHandle.Marshal(b, m, deterministic)
}
func (dst *ArgusdMetricsHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgusdMetricsHandle.Merge(dst, src)
}
func (m *ArgusdMetricsHandle) XXX_Size() int {
	return xxx_messageInfo_ArgusdMetricsHandle.Size(m)
}
func (m *ArgusdMetricsHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgusdMetricsHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ArgusdMetricsHandle proto.InternalMessageInfo

func (m *ArgusdMetricsHandle) GetArgusWatcher() string {
	if m != nil {
		return m.ArgusWatcher
	}
	return ""
}

func (m *ArgusdMetricsHandle) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *ArgusdMetricsHandle) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_argus_88dc73f8baf515d2, []int{4}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ArgusdConfig)(nil), "argus.ArgusdConfig")
	proto.RegisterType((*ArgusWatcherSubject)(nil), "argus.ArgusWatcherSubject")
	proto.RegisterMapType((map[string]string)(nil), "argus.ArgusWatcherSubject.TagsEntry")
	proto.RegisterType((*ArgusdHandle)(nil), "argus.ArgusdHandle")
	proto.RegisterType((*ArgusdMetricsHandle)(nil), "argus.ArgusdMetricsHandle")
	proto.RegisterType((*Empty)(nil), "argus.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArgusdClient is the client API for Argusd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArgusdClient interface {
	CreateWatch(ctx context.Context, in *ArgusdConfig, opts ...grpc.CallOption) (*ArgusdHandle, error)
	DestroyWatch(ctx context.Context, in *ArgusdConfig, opts ...grpc.CallOption) (*Empty, error)
	GetWatchState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Argusd_GetWatchStateClient, error)
	RecordMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Argusd_RecordMetricsClient, error)
}

type argusdClient struct {
	cc *grpc.ClientConn
}

func NewArgusdClient(cc *grpc.ClientConn) ArgusdClient {
	return &argusdClient{cc}
}

func (c *argusdClient) CreateWatch(ctx context.Context, in *ArgusdConfig, opts ...grpc.CallOption) (*ArgusdHandle, error) {
	out := new(ArgusdHandle)
	err := c.cc.Invoke(ctx, "/argus.Argusd/CreateWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argusdClient) DestroyWatch(ctx context.Context, in *ArgusdConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/argus.Argusd/DestroyWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argusdClient) GetWatchState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Argusd_GetWatchStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Argusd_serviceDesc.Streams[0], "/argus.Argusd/GetWatchState", opts...)
	if err != nil {
		return nil, err
	}
	x := &argusdGetWatchStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Argusd_GetWatchStateClient interface {
	Recv() (*ArgusdHandle, error)
	grpc.ClientStream
}

type argusdGetWatchStateClient struct {
	grpc.ClientStream
}

func (x *argusdGetWatchStateClient) Recv() (*ArgusdHandle, error) {
	m := new(ArgusdHandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *argusdClient) RecordMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Argusd_RecordMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Argusd_serviceDesc.Streams[1], "/argus.Argusd/RecordMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &argusdRecordMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Argusd_RecordMetricsClient interface {
	Recv() (*ArgusdMetricsHandle, error)
	grpc.ClientStream
}

type argusdRecordMetricsClient struct {
	grpc.ClientStream
}

func (x *argusdRecordMetricsClient) Recv() (*ArgusdMetricsHandle, error) {
	m := new(ArgusdMetricsHandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArgusdServer is the server API for Argusd service.
type ArgusdServer interface {
	CreateWatch(context.Context, *ArgusdConfig) (*ArgusdHandle, error)
	DestroyWatch(context.Context, *ArgusdConfig) (*Empty, error)
	GetWatchState(*Empty, Argusd_GetWatchStateServer) error
	RecordMetrics(*Empty, Argusd_RecordMetricsServer) error
}

func RegisterArgusdServer(s *grpc.Server, srv ArgusdServer) {
	s.RegisterService(&_Argusd_serviceDesc, srv)
}

func _Argusd_CreateWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgusdConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgusdServer).CreateWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/argus.Argusd/CreateWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgusdServer).CreateWatch(ctx, req.(*ArgusdConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Argusd_DestroyWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgusdConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgusdServer).DestroyWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/argus.Argusd/DestroyWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgusdServer).DestroyWatch(ctx, req.(*ArgusdConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Argusd_GetWatchState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArgusdServer).GetWatchState(m, &argusdGetWatchStateServer{stream})
}

type Argusd_GetWatchStateServer interface {
	Send(*ArgusdHandle) error
	grpc.ServerStream
}

type argusdGetWatchStateServer struct {
	grpc.ServerStream
}

func (x *argusdGetWatchStateServer) Send(m *ArgusdHandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Argusd_RecordMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArgusdServer).RecordMetrics(m, &argusdRecordMetricsServer{stream})
}

type Argusd_RecordMetricsServer interface {
	Send(*ArgusdMetricsHandle) error
	grpc.ServerStream
}

type argusdRecordMetricsServer struct {
	grpc.ServerStream
}

func (x *argusdRecordMetricsServer) Send(m *ArgusdMetricsHandle) error {
	return x.ServerStream.SendMsg(m)
}

var _Argusd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "argus.Argusd",
	HandlerType: (*ArgusdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWatch",
			Handler:    _Argusd_CreateWatch_Handler,
		},
		{
			MethodName: "DestroyWatch",
			Handler:    _Argusd_DestroyWatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWatchState",
			Handler:       _Argusd_GetWatchState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordMetrics",
			Handler:       _Argusd_RecordMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "argus.proto",
}

func init() { proto.RegisterFile("argus.proto", fileDescriptor_argus_88dc73f8baf515d2) }

var fileDescriptor_argus_88dc73f8baf515d2 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xed, 0xda, 0xb1, 0x93, 0x4c, 0xd2, 0x4f, 0x9f, 0xb6, 0x08, 0xad, 0x22, 0x84, 0x2c, 0x0b,
	0x21, 0x9f, 0x22, 0xd4, 0x22, 0x28, 0x48, 0x1c, 0x50, 0x13, 0xe0, 0x52, 0x0e, 0x2e, 0x12, 0xe7,
	0xad, 0x3d, 0x71, 0x4c, 0x1d, 0xaf, 0xb5, 0xde, 0x04, 0x7c, 0xe1, 0xa7, 0xf1, 0x1b, 0xf8, 0x27,
	0xfc, 0x05, 0xb4, 0x6b, 0x3b, 0xb1, 0xab, 0x86, 0xdb, 0xbc, 0xb7, 0x3b, 0x99, 0x79, 0xef, 0x79,
	0x03, 0x13, 0x2e, 0x93, 0x6d, 0x39, 0x2f, 0xa4, 0x50, 0x82, 0x3a, 0x06, 0xf8, 0xbf, 0x09, 0x4c,
	0xdf, 0xeb, 0x2a, 0xbe, 0x12, 0xf9, 0x2a, 0x4d, 0x28, 0x85, 0x41, 0xce, 0x37, 0xc8, 0x88, 0x47,
	0x82, 0x71, 0x68, 0x6a, 0x3a, 0x83, 0x51, 0x2e, 0x62, 0xfc, 0xac, 0x79, 0xcb, 0xf0, 0x7b, 0x4c,
	0x19, 0x0c, 0x0b, 0x11, 0x9b, 0x23, 0xdb, 0x1c, 0xb5, 0x90, 0xfe, 0x0f, 0x76, 0x91, 0xc6, 0x6c,
	0xe0, 0xd9, 0x81, 0x13, 0xea, 0x52, 0x33, 0x51, 0x1a, 0x33, 0xc7, 0xb3, 0x83, 0x71, 0xa8, 0x4b,
	0xfa, 0x12, 0x86, 0xe5, 0xf6, 0xf6, 0x1b, 0x46, 0x8a, 0xb9, 0x9e, 0x1d, 0x4c, 0xce, 0x67, 0xf3,
	0x7a, 0x49, 0xb3, 0xd3, 0x57, 0xae, 0xa2, 0x35, 0xca, 0x9b, 0xfa, 0x46, 0xd8, 0x5e, 0xa5, 0x4f,
	0x60, 0x9c, 0x89, 0xe4, 0x83, 0x90, 0x1b, 0xae, 0xd8, 0xd0, 0x4c, 0x3d, 0x10, 0xfe, 0x2f, 0x0b,
	0xce, 0x1e, 0x68, 0xd7, 0xca, 0x0a, 0xae, 0xd6, 0x8c, 0x98, 0xf1, 0xa6, 0xa6, 0x8f, 0xc0, 0xc1,
	0x1d, 0xe6, 0x8a, 0x59, 0x86, 0xac, 0x01, 0x7d, 0x0c, 0x6e, 0x9a, 0xe4, 0x42, 0x6a, 0x49, 0x9a,
	0x6e, 0x90, 0xd6, 0x2a, 0xf2, 0xac, 0x5a, 0xa4, 0x92, 0x0d, 0x3c, 0x12, 0x8c, 0xc2, 0x16, 0xea,
	0x8d, 0x24, 0x46, 0x5b, 0x59, 0xa6, 0x3b, 0x64, 0x8e, 0x39, 0x3b, 0x10, 0xda, 0xbf, 0x0d, 0xff,
	0xb1, 0xc0, 0x42, 0xad, 0x99, 0xeb, 0x91, 0xc0, 0x09, 0xf7, 0x98, 0x3e, 0x05, 0x58, 0x89, 0x2c,
	0x13, 0xdf, 0xaf, 0xc5, 0x0e, 0x8d, 0x98, 0x51, 0xd8, 0x61, 0xe8, 0x25, 0x0c, 0x14, 0x4f, 0x4a,
	0x36, 0x32, 0xf6, 0x3c, 0x3b, 0x6e, 0xcf, 0xfc, 0x0b, 0x4f, 0xca, 0x65, 0xae, 0x64, 0x15, 0x9a,
	0x8e, 0xd9, 0x6b, 0x18, 0xef, 0x29, 0x6d, 0xfd, 0x1d, 0x56, 0x4d, 0xaa, 0xba, 0xd4, 0xd2, 0x77,
	0x3c, 0xdb, 0xb6, 0x89, 0xd6, 0xe0, 0xad, 0x75, 0x49, 0xfc, 0x9f, 0xed, 0x27, 0xf1, 0x89, 0xe7,
	0x71, 0xd6, 0x8f, 0x9f, 0x1c, 0x8f, 0xdf, 0x7a, 0x30, 0x7e, 0xfb, 0x10, 0xff, 0x73, 0xf8, 0xaf,
	0x90, 0x22, 0xc2, 0xb2, 0x5c, 0x6a, 0x9b, 0x57, 0xed, 0xb7, 0x71, 0x8f, 0xf5, 0xef, 0x9a, 0xfc,
	0xe2, 0x6b, 0x54, 0x32, 0x8d, 0xca, 0x66, 0x0d, 0x1f, 0xa6, 0xbc, 0x23, 0xbb, 0x59, 0xa5, 0xc7,
	0x75, 0xf3, 0x24, 0x87, 0x3c, 0xbb, 0x02, 0xec, 0xbe, 0x00, 0x7f, 0x08, 0xce, 0x72, 0x53, 0xa8,
	0xea, 0xfc, 0x0f, 0x01, 0xb7, 0x1e, 0x4b, 0xdf, 0xc0, 0xe4, 0x4a, 0x22, 0x57, 0x68, 0x7e, 0x96,
	0x9e, 0x75, 0x4d, 0x6f, 0xde, 0xc9, 0xac, 0x4f, 0xd6, 0x2b, 0xfa, 0x27, 0xf4, 0x02, 0xa6, 0x0b,
	0x2c, 0x95, 0x14, 0xd5, 0x3f, 0x7a, 0xa7, 0x0d, 0x69, 0x06, 0xfb, 0x27, 0xf4, 0x15, 0x9c, 0x7e,
	0x44, 0x65, 0x1a, 0x6e, 0x14, 0x57, 0x48, 0x7b, 0x17, 0x8e, 0x8c, 0x7a, 0x41, 0xe8, 0x3b, 0x38,
	0x0d, 0x31, 0x12, 0xb2, 0x35, 0xea, 0x5e, 0x5f, 0xef, 0x2d, 0xf5, 0xcd, 0xd4, 0xed, 0xb7, 0xae,
	0xf9, 0x27, 0xb8, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x8a, 0xf9, 0x7f, 0x18, 0x04, 0x00,
	0x00,
}
