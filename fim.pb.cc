// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fim.proto

#include "fim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fim {
class FimdConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FimdConfig>
      _instance;
} _FimdConfig_default_instance_;
class FimWatcherSubjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FimWatcherSubject>
      _instance;
} _FimWatcherSubject_default_instance_;
class FimdHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FimdHandle>
      _instance;
} _FimdHandle_default_instance_;
}  // namespace fim
namespace protobuf_fim_2eproto {
void InitDefaultsFimdConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fim_2eproto::InitDefaultsFimWatcherSubject();
  {
    void* ptr = &::fim::_FimdConfig_default_instance_;
    new (ptr) ::fim::FimdConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fim::FimdConfig::InitAsDefaultInstance();
}

void InitDefaultsFimdConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFimdConfigImpl);
}

void InitDefaultsFimWatcherSubjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fim::_FimWatcherSubject_default_instance_;
    new (ptr) ::fim::FimWatcherSubject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fim::FimWatcherSubject::InitAsDefaultInstance();
}

void InitDefaultsFimWatcherSubject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFimWatcherSubjectImpl);
}

void InitDefaultsFimdHandleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fim::_FimdHandle_default_instance_;
    new (ptr) ::fim::FimdHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fim::FimdHandle::InitAsDefaultInstance();
}

void InitDefaultsFimdHandle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFimdHandleImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimdConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimdConfig, containerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimdConfig, subjects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimWatcherSubject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimWatcherSubject, paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimWatcherSubject, events_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimdHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fim::FimdHandle, id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fim::FimdConfig)},
  { 7, -1, sizeof(::fim::FimWatcherSubject)},
  { 14, -1, sizeof(::fim::FimdHandle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fim::_FimdConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fim::_FimWatcherSubject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fim::_FimdHandle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fim.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tfim.proto\022\003fim\"K\n\nFimdConfig\022\023\n\013contai"
      "nerId\030\001 \001(\t\022(\n\010subjects\030\002 \003(\0132\026.fim.FimW"
      "atcherSubject\"2\n\021FimWatcherSubject\022\r\n\005pa"
      "ths\030\001 \003(\t\022\016\n\006events\030\002 \003(\t\"\030\n\nFimdHandle\022"
      "\n\n\002id\030\001 \001(\00526\n\004Fimd\022.\n\010NewWatch\022\017.fim.Fi"
      "mdConfig\032\017.fim.FimdHandle\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fim.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fim_2eproto
namespace fim {

// ===================================================================

void FimdConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FimdConfig::kContainerIdFieldNumber;
const int FimdConfig::kSubjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FimdConfig::FimdConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fim_2eproto::InitDefaultsFimdConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fim.FimdConfig)
}
FimdConfig::FimdConfig(const FimdConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subjects_(from.subjects_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  containerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.containerid().size() > 0) {
    containerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.containerid_);
  }
  // @@protoc_insertion_point(copy_constructor:fim.FimdConfig)
}

void FimdConfig::SharedCtor() {
  containerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FimdConfig::~FimdConfig() {
  // @@protoc_insertion_point(destructor:fim.FimdConfig)
  SharedDtor();
}

void FimdConfig::SharedDtor() {
  containerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FimdConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FimdConfig::descriptor() {
  ::protobuf_fim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fim_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FimdConfig& FimdConfig::default_instance() {
  ::protobuf_fim_2eproto::InitDefaultsFimdConfig();
  return *internal_default_instance();
}

FimdConfig* FimdConfig::New(::google::protobuf::Arena* arena) const {
  FimdConfig* n = new FimdConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FimdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:fim.FimdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subjects_.Clear();
  containerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FimdConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fim.FimdConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string containerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_containerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->containerid().data(), static_cast<int>(this->containerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fim.FimdConfig.containerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fim.FimWatcherSubject subjects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_subjects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fim.FimdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fim.FimdConfig)
  return false;
#undef DO_
}

void FimdConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fim.FimdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string containerId = 1;
  if (this->containerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->containerid().data(), static_cast<int>(this->containerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fim.FimdConfig.containerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->containerid(), output);
  }

  // repeated .fim.FimWatcherSubject subjects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subjects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subjects(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fim.FimdConfig)
}

::google::protobuf::uint8* FimdConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fim.FimdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string containerId = 1;
  if (this->containerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->containerid().data(), static_cast<int>(this->containerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fim.FimdConfig.containerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->containerid(), target);
  }

  // repeated .fim.FimWatcherSubject subjects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subjects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->subjects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fim.FimdConfig)
  return target;
}

size_t FimdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fim.FimdConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fim.FimWatcherSubject subjects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->subjects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subjects(static_cast<int>(i)));
    }
  }

  // string containerId = 1;
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->containerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FimdConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fim.FimdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FimdConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FimdConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fim.FimdConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fim.FimdConfig)
    MergeFrom(*source);
  }
}

void FimdConfig::MergeFrom(const FimdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fim.FimdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subjects_.MergeFrom(from.subjects_);
  if (from.containerid().size() > 0) {

    containerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.containerid_);
  }
}

void FimdConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fim.FimdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FimdConfig::CopyFrom(const FimdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fim.FimdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FimdConfig::IsInitialized() const {
  return true;
}

void FimdConfig::Swap(FimdConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FimdConfig::InternalSwap(FimdConfig* other) {
  using std::swap;
  subjects_.InternalSwap(&other->subjects_);
  containerid_.Swap(&other->containerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FimdConfig::GetMetadata() const {
  protobuf_fim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fim_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FimWatcherSubject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FimWatcherSubject::kPathsFieldNumber;
const int FimWatcherSubject::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FimWatcherSubject::FimWatcherSubject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fim_2eproto::InitDefaultsFimWatcherSubject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fim.FimWatcherSubject)
}
FimWatcherSubject::FimWatcherSubject(const FimWatcherSubject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      paths_(from.paths_),
      events_(from.events_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fim.FimWatcherSubject)
}

void FimWatcherSubject::SharedCtor() {
  _cached_size_ = 0;
}

FimWatcherSubject::~FimWatcherSubject() {
  // @@protoc_insertion_point(destructor:fim.FimWatcherSubject)
  SharedDtor();
}

void FimWatcherSubject::SharedDtor() {
}

void FimWatcherSubject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FimWatcherSubject::descriptor() {
  ::protobuf_fim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fim_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FimWatcherSubject& FimWatcherSubject::default_instance() {
  ::protobuf_fim_2eproto::InitDefaultsFimWatcherSubject();
  return *internal_default_instance();
}

FimWatcherSubject* FimWatcherSubject::New(::google::protobuf::Arena* arena) const {
  FimWatcherSubject* n = new FimWatcherSubject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FimWatcherSubject::Clear() {
// @@protoc_insertion_point(message_clear_start:fim.FimWatcherSubject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  events_.Clear();
  _internal_metadata_.Clear();
}

bool FimWatcherSubject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fim.FimWatcherSubject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string paths = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paths()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->paths(this->paths_size() - 1).data(),
            static_cast<int>(this->paths(this->paths_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fim.FimWatcherSubject.paths"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string events = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_events()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->events(this->events_size() - 1).data(),
            static_cast<int>(this->events(this->events_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fim.FimWatcherSubject.events"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fim.FimWatcherSubject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fim.FimWatcherSubject)
  return false;
#undef DO_
}

void FimWatcherSubject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fim.FimWatcherSubject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paths = 1;
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paths(i).data(), static_cast<int>(this->paths(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fim.FimWatcherSubject.paths");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paths(i), output);
  }

  // repeated string events = 2;
  for (int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->events(i).data(), static_cast<int>(this->events(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fim.FimWatcherSubject.events");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->events(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fim.FimWatcherSubject)
}

::google::protobuf::uint8* FimWatcherSubject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fim.FimWatcherSubject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paths = 1;
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paths(i).data(), static_cast<int>(this->paths(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fim.FimWatcherSubject.paths");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->paths(i), target);
  }

  // repeated string events = 2;
  for (int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->events(i).data(), static_cast<int>(this->events(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fim.FimWatcherSubject.events");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->events(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fim.FimWatcherSubject)
  return target;
}

size_t FimWatcherSubject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fim.FimWatcherSubject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string paths = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->paths_size());
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paths(i));
  }

  // repeated string events = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->events_size());
  for (int i = 0, n = this->events_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->events(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FimWatcherSubject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fim.FimWatcherSubject)
  GOOGLE_DCHECK_NE(&from, this);
  const FimWatcherSubject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FimWatcherSubject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fim.FimWatcherSubject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fim.FimWatcherSubject)
    MergeFrom(*source);
  }
}

void FimWatcherSubject::MergeFrom(const FimWatcherSubject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fim.FimWatcherSubject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  events_.MergeFrom(from.events_);
}

void FimWatcherSubject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fim.FimWatcherSubject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FimWatcherSubject::CopyFrom(const FimWatcherSubject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fim.FimWatcherSubject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FimWatcherSubject::IsInitialized() const {
  return true;
}

void FimWatcherSubject::Swap(FimWatcherSubject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FimWatcherSubject::InternalSwap(FimWatcherSubject* other) {
  using std::swap;
  paths_.InternalSwap(&other->paths_);
  events_.InternalSwap(&other->events_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FimWatcherSubject::GetMetadata() const {
  protobuf_fim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fim_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FimdHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FimdHandle::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FimdHandle::FimdHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fim_2eproto::InitDefaultsFimdHandle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fim.FimdHandle)
}
FimdHandle::FimdHandle(const FimdHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:fim.FimdHandle)
}

void FimdHandle::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

FimdHandle::~FimdHandle() {
  // @@protoc_insertion_point(destructor:fim.FimdHandle)
  SharedDtor();
}

void FimdHandle::SharedDtor() {
}

void FimdHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FimdHandle::descriptor() {
  ::protobuf_fim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fim_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FimdHandle& FimdHandle::default_instance() {
  ::protobuf_fim_2eproto::InitDefaultsFimdHandle();
  return *internal_default_instance();
}

FimdHandle* FimdHandle::New(::google::protobuf::Arena* arena) const {
  FimdHandle* n = new FimdHandle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FimdHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:fim.FimdHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

bool FimdHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fim.FimdHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fim.FimdHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fim.FimdHandle)
  return false;
#undef DO_
}

void FimdHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fim.FimdHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fim.FimdHandle)
}

::google::protobuf::uint8* FimdHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fim.FimdHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fim.FimdHandle)
  return target;
}

size_t FimdHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fim.FimdHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FimdHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fim.FimdHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const FimdHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FimdHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fim.FimdHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fim.FimdHandle)
    MergeFrom(*source);
  }
}

void FimdHandle::MergeFrom(const FimdHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fim.FimdHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void FimdHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fim.FimdHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FimdHandle::CopyFrom(const FimdHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fim.FimdHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FimdHandle::IsInitialized() const {
  return true;
}

void FimdHandle::Swap(FimdHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FimdHandle::InternalSwap(FimdHandle* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FimdHandle::GetMetadata() const {
  protobuf_fim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fim_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fim

// @@protoc_insertion_point(global_scope)
