// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fim.proto

#include "fim.pb.h"
#include "fim.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fim {

static const char* Fimd_method_names[] = {
  "/fim.Fimd/NewWatch",
};

std::unique_ptr< Fimd::Stub> Fimd::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Fimd::Stub> stub(new Fimd::Stub(channel));
  return stub;
}

Fimd::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NewWatch_(Fimd_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Fimd::Stub::NewWatch(::grpc::ClientContext* context, const ::fim::FimdConfig& request, ::fim::FimdHandle* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewWatch_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fim::FimdHandle>* Fimd::Stub::AsyncNewWatchRaw(::grpc::ClientContext* context, const ::fim::FimdConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fim::FimdHandle>::Create(channel_.get(), cq, rpcmethod_NewWatch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fim::FimdHandle>* Fimd::Stub::PrepareAsyncNewWatchRaw(::grpc::ClientContext* context, const ::fim::FimdConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::fim::FimdHandle>::Create(channel_.get(), cq, rpcmethod_NewWatch_, context, request, false);
}

Fimd::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Fimd_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Fimd::Service, ::fim::FimdConfig, ::fim::FimdHandle>(
          std::mem_fn(&Fimd::Service::NewWatch), this)));
}

Fimd::Service::~Service() {
}

::grpc::Status Fimd::Service::NewWatch(::grpc::ServerContext* context, const ::fim::FimdConfig* request, ::fim::FimdHandle* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fim

